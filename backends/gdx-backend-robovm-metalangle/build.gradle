plugins {
    id 'org.jetbrains.kotlin.jvm'
}
import org.gradle.internal.os.OperatingSystem

sourceSets {
    generator {
        java {
            srcDir 'generator'
        }
        resources {
            srcDir 'generator'
        }
    }
    main {
        java {
            srcDir 'src'
        }
        resources {
            srcDir 'res'
        }
    }
}
configurations {
    generatorCompile.extendsFrom testCompile
    generatorRuntime.extendsFrom testRuntime
}

configurations { generator }

dependencies {
    api libraries.robovm
    generatorImplementation 'com.github.javaparser:javaparser-core:3.24.2'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
}

tasks.register('generate', JavaExec) {
    dependsOn configurations.generator

    mainClass = 'JavaCodeGenerator'
    classpath = sourceSets.generator.runtimeClasspath

    inputs.dir '../gdx-backend-robovm/src/'
    outputs.dir 'src/'
}

tasks.register('fetchMetalANGLE', Download) {
    doFirst {
        file("build/tmp").mkdirs();
    }
    src 'https://github.com/kakashidinho/metalangle/releases/download/gles3-0.0.8/MetalANGLE.framework.ios.zip'
    dest 'build/tmp/MetalANGLE.framework.ios.zip'
    onlyIfModified true
    useETag "all"
}

tasks.register('fetchMetalANGLESimulator', Download) {
    doFirst {
        file("build/tmp").mkdirs();
    }
    src 'https://github.com/kakashidinho/metalangle/releases/download/gles3-0.0.8/MetalANGLE.framework.ios.simulator.zip'
    dest 'build/tmp/MetalANGLE.framework.ios.simulator.zip'
    onlyIfModified true
    useETag "all"
}

tasks.register('verifyMetalANGLE', Verify) {
    dependsOn fetchMetalANGLE
    src 'build/tmp/MetalANGLE.framework.ios.zip'
    algorithm 'SHA-256'
    checksum '9b6e7c82d41749266200ed19bb184c4f47df63c4dcde0972186ea557de623018'
}

tasks.register('verifyMetalANGLESimulator', Verify) {
    dependsOn fetchMetalANGLESimulator
    src 'build/tmp/MetalANGLE.framework.ios.simulator.zip'
    algorithm 'SHA-256'
    checksum '63ff063bf7825e2da9a01eda981067eb4eacd42e202c86f448541d2c5bd564a9'
}

tasks.register('extractMetalANGLE', Copy) {
    dependsOn verifyMetalANGLE
    doFirst {
        file("build/tmp/real").mkdirs();
    }
    from zipTree('build/tmp/MetalANGLE.framework.ios.zip')
    into 'build/tmp/real'
}

tasks.register('extractMetalANGLESimulator', Copy) {
    dependsOn verifyMetalANGLESimulator
    doFirst {
        file("build/tmp/sim").mkdirs();
    }
    from zipTree('build/tmp/MetalANGLE.framework.ios.simulator.zip')
    into 'build/tmp/sim'
}

tasks.register('buildMetalANGLE', Exec) {
    dependsOn extractMetalANGLE, extractMetalANGLESimulator
    doFirst {
        delete("res/META-INF/robovm/ios/libs/MetalANGLE.xcframework")
        file("res/META-INF/robovm/ios/libs").mkdirs();
    }
    commandLine 'xcodebuild', '-create-xcframework', '-framework', 'build/tmp/real/MetalANGLE.framework', '-framework', 'build/tmp/sim/MetalANGLE.framework', '-output', 'res/META-INF/robovm/ios/libs/MetalANGLE.xcframework'
    standardOutput = new ByteArrayOutputStream()
    ext.output = {
        return standardOutput.toString()
    }

    inputs.dir 'build/tmp/real/MetalANGLE.framework'
    inputs.dir 'build/tmp/sim/MetalANGLE.framework'
    outputs.dir 'res/META-INF/robovm/ios/libs/MetalANGLE.xcframework'
}

tasks.register('jnigenBuildIOS') {
    dependsOn buildMetalANGLE
}

tasks.register('jnigenBuild') {
}

//Dummy task to make compatible with publish
tasks.register('jnigen') {
}

if (OperatingSystem.current() == OperatingSystem.MAC_OS) {
    jnigenBuild.dependsOn jnigenBuildIOS
}

processResources.duplicatesStrategy = DuplicatesStrategy.EXCLUDE
sourcesJar.duplicatesStrategy = DuplicatesStrategy.EXCLUDE
repositories {
    mavenCentral()
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
